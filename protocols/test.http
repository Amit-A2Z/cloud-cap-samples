@cql = http://localhost:4004/cql
@cqn: = Content-Type: application/json\n\n
@cql: = Content-Type: text/plain\n\n

#
#   The basic variant expects a CQN object passed as an application/json
#   body to a POST request
#

POST {{cql}}/browse
{{cqn:}} {"SELECT": { "from": { "ref": ["Books"] }}}
###

POST {{cql}}/browse
{{cql:}} SELECT from Books
###


#
#   Alternatively you can pass a CQL string as plain/text body
#

POST {{cql}}/admin
{{cql:}} SELECT from Authors {
  name as author,
  books {
    title,
    stock,
    currency {
      code, symbol
    }
  }
}
where name like '%Ed%'
order by name asc
###


#
#   Simple REST-style URLs as supported as well
#

GET {{cql}}/admin/Books
###

GET {{cql}}/admin/Books/201
###


#
#   REST-style URLs can be combined with trailing CQL in the path, in plain
#   text body, or with projections sent as application/json array
#

GET {{cql}}/admin/Books order by stock desc
###

GET {{cql}}/admin/Books { title as book, stock } order by stock desc
###

GET {{cql}}/admin/Authors
Accept-Language: de
{{cql:}} {
  name as author,
  books {
    title,
    stock,
    currency {
      code,
      symbol
    }
  }
}
where name like '%Bro%'
order by name asc
###


GET {{cql}}/admin/Books/201
{{cqn:}} [ "title", "stock" ]
###


#
#   CQL adaptor also provides access to the underlying CSN schema
#

GET {{cql}}/admin/$csn
###

POST {{cql}}/admin
Authorization: Basic alice:in wonderland
{{cqn:}} { "INSERT": {
  "into": "Books",
  "entries": [{
    "title": "The Black Cat",
    "author": { "ID": 150 }
  }]
}}
